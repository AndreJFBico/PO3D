package thor.model.geoset;

import thor.graphics.Point3D;

public class GiftWrap3D {
	
	  protected Point3D search2d(Point3D p) {
	      int i;
	      i = pts[0] == p?1:0;
	      Point3D cand = pts[i];
	      HalfSpace candh = new HalfSpace(p,cand);
	      for(i=i+1; i < pts.length; i++) {
		if (pts[i] != p && candh.inside(pts[i])) {
		  cand = pts[i];
		  candh = new HalfSpace(p,cand);
		}
	      }
	      return cand;
	}

	  /* bottom point */
	  protected Point3D bottom(){
		  Point3D bot = pts[0];
	    for (int i = 1; i < pts.length; i++) {
	      if (pts[i].y() < bot.y()) {
		bot = pts[i];
	      }
	    }
	    return bot;
	  }
		
	  public Object3dList build () {
	    /* First find a hull edge -- just connect bottommost to second from bottom */
		Point3D bot, bot2; /* bottom point and adjacent point*/
	    bot = bottom();
	    bot2 = search2d(bot);
			
	    /* intialize the edge stack */
	    EdgeStack es = new EdgeStack();
	    es.put(bot,bot2);	
	    es.put(bot2,bot);
	    Object3dList faces = new Object3dList(20);
	    int tcount = 1;
	    Edge3d e = new Edge3d(bot,bot2,tcount);
	    e.lastFrame = tcount++;
	    faces.addElement(e);
			
	    /* now the main loop -- keep finding faces till there are no more to be found */
	    while (! es.isEmpty() ) {
	      e = es.get();
	      Point3D cand = search(e);
	      faces.addElement(new Triangle3d(e.start,e.end,cand,tcount++));
	      es.putp(e.start,cand);
	      es.putp(cand,e.end);
	    }
	    faces.lastFrame = tcount;
	    return faces;
	  }
	
}
