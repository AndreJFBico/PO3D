package thor.model.geoset;

import thor.graphics.Point3D;

public class HalfSpace {
	  public static Point3D k = new Point3D(0,0,1);
	  /*final*/ Point3D normal ; // normal to boundary plane
	  /*final*/ double d; // eqn of half space is normal.x - d > 0
	  
	  /** Create a half space
	   */
	  public HalfSpace(Point3D a,Point3D b,Point3D c){
	    normal = b.subtract(a).cross(c.subtract(a)).normalize();
	    d = normal.dot(a);
	  }
	  
	  public double dot(Point3d x){
		    double d = 0;
		    for (int i=0;i<3;i++){
		      d += v[i] * x.v[i];
		    }
		    return d;
	  }

	  /** Create a half space parallel to z axis
	   */
	  public HalfSpace(Point3D a,Point3D b){
		  b.sub(a);
		  b.
		  
	    normal =    .cross(k);//.normalize();
	    d = normal.dot(a);
	  }

	  public boolean inside (Point3D x){
	    return normal.dot(x) > d;
	  }

	  /** z coordinate of intersection of a vertical line through p and boundary plane */
	  public double zint(Point3D p){
	    return (d - normal.x()*p.x() - normal.y()*p.y()) / normal.z();
	  }
}
