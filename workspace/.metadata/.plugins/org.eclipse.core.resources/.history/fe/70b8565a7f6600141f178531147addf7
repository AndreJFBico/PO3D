package thor.model.geoset;

import java.util.List;
import java.util.ArrayList;

import thor.graphics.Point3D;
import thor.graphics.Point3D.Double;
import thor.model.geoset.Voxel;

public class VoxelMesh {

	protected List<Voxel> _boundary = new ArrayList<Voxel>();
	protected List<Voxel> _inside = new ArrayList<Voxel>();
	protected Voxel[] _voxelGrid;
	protected double _voxelSize;
	protected int numVoxelX, numVoxelY, numVoxelZ;
	protected AABB _boundingBox;
	protected List<Vertex> _vertices;
	protected List<Face> _faces;

	public VoxelMesh(List<Vertex> vertices, double voxelSize, List<Face> faces) {
		_vertices = vertices;
		_faces = faces;
		double min_x, max_x, min_y, max_y, min_z, max_z;
		min_x = max_x = vertices.get(0).getX();
		min_y = max_y = vertices.get(0).getY();
		min_z = max_z = vertices.get(0).getZ();
		for (int i = 0; i < vertices.size(); i++) {
			if (vertices.get(i).getX() < min_x)
				min_x = vertices.get(i).getX();
			if (vertices.get(i).getX() > max_x)
				max_x = vertices.get(i).getX();
			if (vertices.get(i).getY() < min_y)
				min_y = vertices.get(i).getY();
			if (vertices.get(i).getY() > max_y)
				max_y = vertices.get(i).getY();
			if (vertices.get(i).getZ() < min_z)
				min_z = vertices.get(i).getZ();
			if (vertices.get(i).getZ() > max_z)
				max_z = vertices.get(i).getZ();
		}
		System.out.println("running");
		// bounding box of the mesh
		_boundingBox = new AABB(new Point3D.Double(min_x, min_y, min_z),
				new Point3D.Double(max_x, max_y, max_z));

		_voxelSize = voxelSize;

		double lengthX = max_x - min_x;
		double lengthY = max_y - min_y;
		double lengthZ = max_z - min_z;
		numVoxelX = (int) Math.round(lengthX / voxelSize);
		numVoxelY = (int) Math.round(lengthY / voxelSize);
		numVoxelZ = (int) Math.round(lengthZ / voxelSize);

		// System.out.println(numVoxelX + " " + numVoxelY + " " + numVoxelZ);
		// System.out.println(lengthX + " " + lengthY + " " + lengthZ);

		_voxelGrid = new Voxel[numVoxelX * numVoxelY * numVoxelZ];
		System.out.println(numVoxelX * numVoxelY * numVoxelZ);
		double current_min_x = min_x;
		double current_min_y = min_y;
		double current_min_z = min_z;

		double current_max_x = min_x + _voxelSize;
		double current_max_y = min_y + _voxelSize;
		double current_max_z = min_z + _voxelSize;

		for (int x = 0; x < numVoxelX; x++, current_min_x += _voxelSize, current_max_x += _voxelSize) {
			for (int y = 0; y < numVoxelY; y++, current_min_y += _voxelSize, current_max_y += _voxelSize) {
				for (int z = 0; z < numVoxelZ; z++, current_min_z += _voxelSize, current_max_z += _voxelSize) {
					_voxelGrid[x * numVoxelY * numVoxelZ + y * numVoxelZ + z] = new Voxel(
							new Point3D.Double(
									(current_min_x + current_max_x) / 2.0f,
									(current_min_y + current_max_y) / 2.0f,
									(current_min_z + current_max_z) / 2.0f), x,
							y, z, new Point3D.Double(current_min_x,
									current_min_y, current_min_z),
							new Point3D.Double(current_max_x, current_max_y,
									current_max_z), _voxelSize,
							genVoxelNeighbors(x, y, z));
					System.out.println(x * numVoxelY * numVoxelZ + y
							* numVoxelZ + z);
				}
				current_min_z = min_z;
				current_max_z = min_z + _voxelSize;
			}
			current_min_y = min_y;
			current_max_y = min_y + _voxelSize;
		}
		System.out.println(numVoxelX * numVoxelY * numVoxelZ);
	}

	//TODO: TEST if it works
	private void addNToV(List<Voxel> nghbrs, int tmpx, int tmpy, int tmpz, VoxelNeighborType type) {
		// if its an invalid neighbor as in present outside of a grid, it
		// doesn`t add it
		if (tmpx < 0 || tmpy < 0 || tmpz < 0 || tmpx > numVoxelX - 1
				|| tmpy > numVoxelY - 1 || tmpz > numVoxelZ - 1)
			return;
		Voxel tmp_voxel = getVoxel(tmpx, tmpy, tmpz);
		System.out.println(tmpx +" " + tmpy + " " + tmpz);
		tmp_voxel._n_type = type;
		nghbrs.add(tmp_voxel);
	}

	// Function that generates a voxels 26 neighbors.
	//TODO: TEST if it works
	private List<Integer> genVoxelNeighbors(int x, int y, int z) {
		List<Integer> neighbors = new ArrayList<Voxel>();

		// 9 x+1
		addNToV(neighbors, x + 1, y, z, VoxelNeighborType.F_NEIGHBOR);
		addNToV(neighbors, x + 1, y + 1, z, VoxelNeighborType.E_NEIGHBOR);
		addNToV(neighbors, x + 1, y - 1, z, VoxelNeighborType.E_NEIGHBOR);
		addNToV(neighbors, x + 1, y, z + 1, VoxelNeighborType.E_NEIGHBOR);
		addNToV(neighbors, x + 1, y, z - 1, VoxelNeighborType.E_NEIGHBOR);
		addNToV(neighbors, x + 1, y + 1, z + 1, VoxelNeighborType.V_NEIGHBOR);
		addNToV(neighbors, x + 1, y + 1, z - 1, VoxelNeighborType.V_NEIGHBOR);
		addNToV(neighbors, x + 1, y - 1, z + 1, VoxelNeighborType.V_NEIGHBOR);
		addNToV(neighbors, x + 1, y - 1, z - 1, VoxelNeighborType.V_NEIGHBOR);

		// 9 x-1
		addNToV(neighbors, x - 1, y, z, VoxelNeighborType.F_NEIGHBOR);
		addNToV(neighbors, x - 1, y + 1, z, VoxelNeighborType.E_NEIGHBOR);
		addNToV(neighbors, x - 1, y - 1, z, VoxelNeighborType.E_NEIGHBOR);
		addNToV(neighbors, x - 1, y, z + 1, VoxelNeighborType.E_NEIGHBOR);
		addNToV(neighbors, x - 1, y, z - 1, VoxelNeighborType.E_NEIGHBOR);
		addNToV(neighbors, x - 1, y + 1, z + 1, VoxelNeighborType.V_NEIGHBOR);
		addNToV(neighbors, x - 1, y + 1, z - 1, VoxelNeighborType.V_NEIGHBOR);
		addNToV(neighbors, x - 1, y - 1, z + 1, VoxelNeighborType.V_NEIGHBOR);
		addNToV(neighbors, x - 1, y - 1, z - 1, VoxelNeighborType.V_NEIGHBOR);

		// 8 x == 0
		addNToV(neighbors, x, y + 1, z, VoxelNeighborType.F_NEIGHBOR);
		addNToV(neighbors, x, y - 1, z, VoxelNeighborType.F_NEIGHBOR);
		addNToV(neighbors, x, y, z + 1, VoxelNeighborType.F_NEIGHBOR);
		addNToV(neighbors, x, y, z - 1, VoxelNeighborType.F_NEIGHBOR);
		addNToV(neighbors, x, y + 1, z + 1, VoxelNeighborType.E_NEIGHBOR);
		addNToV(neighbors, x, y + 1, z - 1, VoxelNeighborType.E_NEIGHBOR);
		addNToV(neighbors, x, y - 1, z + 1, VoxelNeighborType.E_NEIGHBOR);
		addNToV(neighbors, x, y - 1, z - 1, VoxelNeighborType.E_NEIGHBOR);

		return neighbors;
	}

	//Generates inside voxels and the distance transform of each voxel to the boundary
	//TODO: TEST if it works
	public List<Voxel> genInsideVoxels() {
		boolean foundBoundary = false;
		int numBoundaryVoxels = 0;
		List<Voxel> _probableInsideVoxels = new ArrayList<Voxel>();
		for (int x = 0; x < numVoxelX;) {
			for (int y = 0; y < numVoxelY;) {
				for (int z = 0; z < numVoxelZ;) {
					Voxel voxel = getVoxel(x, y, z);

					if (voxel._type == VoxelType.BOUNDARY_VOXEL) {
						if(!foundBoundary)
						{
							foundBoundary = true;								
						}
						else
						{
							foundBoundary = false;
							
							//We are sure that the probable inside voxels are inside
							for(int i = 0; i < _probableInsideVoxels.size(); i++)
							{
								_probableInsideVoxels.get(i)._type = VoxelType.INSIDE_VOXEL;
								_inside.add(_probableInsideVoxels.get(i));
							}
							_probableInsideVoxels.clear();
						}
						numBoundaryVoxels++;
					}
					else
					{
						if(foundBoundary)
						{
							_probableInsideVoxels.add(voxel);
						}						
					}
				}
				/*if(numBoundaryVoxels > 1)
				{
					for(int i = 0; i < _probableInsideVoxels.size(); i++)
					{
						_probableInsideVoxels.get(i)._type = VoxelType.INSIDE_VOXEL;
					}
				}*/
				//reset check
				foundBoundary = false;
				numBoundaryVoxels = 0;
			}
		}
		return _inside;
	}
	
	//TODO: TEST if this works
	// First pass of the distance transform calculation algorithm.
	// This function is used when calculating the distance transform for boundary voxels.
	private void assign_Boundary_Voxel_Distance_Transform(Voxel voxel)
	{
		List<Voxel> tmp_neighbors = voxel.getNeighbors();
		for(int i = 0; i < tmp_neighbors.size(); i++)
		{
			Voxel v = tmp_neighbors.get(i);
			if(v._n_type == VoxelNeighborType.F_NEIGHBOR)
			{
				v._DT = 3;
			}
			else if (v._n_type == VoxelNeighborType.E_NEIGHBOR)
			{
				v._DT = 4;
			}
			else if (v._n_type == VoxelNeighborType.V_NEIGHBOR)
			{
				v._DT = 5;
			}
		}
	}

	public List<Voxel> genBoundary() {
		for (int i = 0; i < _faces.size(); i++) {
			// calculates AABB of a triangle
			Face f = _faces.get(i);
			Point3D vertex = _vertices.get(f.Vertices.get(0));
			double min_x = vertex.getX(), min_y = vertex.getY(), min_z = vertex
					.getZ(), max_x = vertex.getX(), max_y = vertex.getY(), max_z = vertex
					.getZ();
			for (int v = 1; v < f.Vertices.size(); v++) {
				vertex = _vertices.get(f.Vertices.get(v));
				if (vertex.getX() < min_x)
					min_x = vertex.getX();
				if (vertex.getX() > max_x)
					max_x = vertex.getX();
				if (vertex.getY() < min_y)
					min_y = vertex.getY();
				if (vertex.getY() > max_y)
					max_y = vertex.getY();
				if (vertex.getZ() < min_z)
					min_z = vertex.getZ();
				if (vertex.getZ() > max_z)
					max_z = vertex.getZ();
			}

			// Obtain a list of voxels accordingly to the triangle bounding box
			int lowx = (int) Math.floor((min_x - _boundingBox._min.getX())
					/ _voxelSize);
			int lowy = (int) Math.floor((min_y - _boundingBox._min.getY())
					/ _voxelSize);
			int lowz = (int) Math.floor((min_z - _boundingBox._min.getZ())
					/ _voxelSize);

			int highx = (int) Math.round((max_x - _boundingBox._min.getX())
					/ _voxelSize);
			int highy = (int) Math.round((max_y - _boundingBox._min.getY())
					/ _voxelSize);
			int highz = (int) Math.round((max_z - _boundingBox._min.getZ())
					/ _voxelSize);

			if (highx > numVoxelX - 1) {
				highx = numVoxelX - 1;
			}
			if (highy > numVoxelY - 1) {
				highy = numVoxelY - 1;
			}
			if (highz > numVoxelZ - 1) {
				highz = numVoxelZ - 1;
			}

			// number of voxels width on x, y and z
			int xnum_voxels = highx - lowx;
			int ynum_voxels = highy - lowy;
			int znum_voxels = highz - lowz;

			for (int x = lowx; x <= highx; x++) {
				for (int y = lowy; y <= highy; y++) {
					for (int z = lowz; z <= highz; z++) {
						Voxel voxel = getVoxel(x, y, z);
						if (voxel.intersect(f, _vertices, _voxelSize)) {
							// System.out.println("intersected: face- " + i +
							// "// XYZ- " + x + " " + y + " " + z);
							voxel.setType(VoxelType.BOUNDARY_VOXEL);
							if (!(_boundary.contains(voxel))) {
								_boundary.add(voxel);
								//TODO: TEST if it works
								//generates the distance transform for each voxel
								assign_Boundary_Voxel_Distance_Transform(voxel);
							}
						} else {
							// System.out.println("not intersected: face- " + i
							// + "// XYZ- " + x + " " + y + " " + z);
						}
					}
				}
			}
		}
		return _boundary;
	}

	public List<Voxel> getBoundary() {
		return _boundary;
	}

	public Voxel[] getGrid() {
		return _voxelGrid;
	}

	// not tested!!!!
	private Voxel getVoxel(int x, int y, int z) {
		return _voxelGrid[x * numVoxelY * numVoxelZ + y * numVoxelZ + z];
	}
}
